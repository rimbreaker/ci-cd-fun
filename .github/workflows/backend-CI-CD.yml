name: backend CI/CD

on:
  push:
    branches: [main]

jobs:
  Node-Setup:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: server
    steps:
      - name: directory checkout
        uses: actions/checkout@v2

      - name: Node setup
        uses: actions/setup-node@v2.5.1
        with:
          cache: "yarn"
          cache-dependency-path: server/yarn.lock

      - name: cache node modules
        uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: installing dependencies
        run: yarn

  Linting:
    needs: Node-Setup
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: server
    steps:
      - name: directory checkout
        uses: actions/checkout@v2

      - name: cache node modules
        uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: linting
        run: |
          yarn
          yarn lint

  Test-Build:
    needs: Node-Setup
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: server
    steps:
      - name: directory checkout
        uses: actions/checkout@v2

      - name: cache node modules
        uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: test build
        run: |
          yarn
          yarn build

  Unit-Tests:
    needs: Node-Setup
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: server
    steps:
      - name: directory checkout
        uses: actions/checkout@v2

      - name: cache node modules
        uses: actions/cache@v2
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: unit testing
        run: |
          yarn
          yarn test --json > unit-test-report.json

      - name: upload testing report
        uses: actions/upload-artifact@v2
        with:
          name: reports
          path: ./server/unit-test-report.json
          if-no-files-found: error

  Dependency-Audit:
    needs: Node-Setup
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: server
    steps:
      - name: directory checkout
        uses: actions/checkout@v2

      - name: cache node modules
        uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: audit
        run: |
          yarn
          yarn yarn-audit-ci --high > audit-report.txt

      - name: upload audit report
        uses: actions/upload-artifact@v2
        with:
          name: reports
          path: ./server/audit-report.txt

  E2E-Tests:
    needs: Node-Setup
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: server
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: cache node modules
        uses: actions/cache@v2
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Run E2E tests
        run: |
          yarn
          yarn test:e2e

  Build-n-deploy-backend:
    needs: [Linting, Test-Build, E2E-Tests, Unit-Tests, Dependency-Audit]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Deploy backend to heroku
        uses: AkhileshNS/heroku-deploy@v3.12.12
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: "ci-cd-back"
          heroku_email: ${{secrets.MY_MAIL}}
          appdir: "server"

  Failure-Report:
    if: failure()
    needs:
      [
        Linting,
        Unit-Tests,
        Dependency-Audit,
        Node-Setup,
        Build-n-deploy-backend,
        E2E-Tests,
        Test-Build,
      ]
    runs-on: ubuntu-latest
    steps:
      - name: Download a Build Artifact
        uses: actions/download-artifact@v2.1.0
        with:
          name: reports
      - run: ls
      - run: cat ./**/reports
